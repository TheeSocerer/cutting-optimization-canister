service : {
    register_material: (record { name: text; description: text }) -> (record { message: text; materialID: text; materialName: text }) query;
    register_material_prices: (record { id: text; prices: vec record { size: nat; price: nat } }) -> (record { message: text; prices: vec record { size: nat; price: nat } });
    get_materials: () -> (vec record { id: text; name: text; description: text; createdAt: int });
    get_material_by_id: (record { id: text }) -> (opt record { id: text; name: text; description: text; createdAt: int }) query;
    get_material_piece_prices: (record { id: text }) -> (opt record { name: text; description: text; prices: vec record { size: nat; price: nat } }) query;
    remove_material: (record { id: text }) -> (variant { ok: text; err: text });
    update_material_piece: (record { id: text; size: nat; price: nat }) -> (variant { ok: record { id: text; materialTypeId: text; createdAt: int; prices: vec record { size: nat; price: nat } }; err: text });
    add_material_piece: (record { id: text; size: nat; price: nat }) -> (variant { ok: record { id: text; materialTypeId: text; createdAt: int; prices: vec record { size: nat; price: nat } }; err: text });
    optimize_cuts: (record { id: text; length: nat }) -> (variant { ok: record { material: text; description: text; results: record { maxProfit: nat; cuts: vec nat } }; err: text });
    http_request: (record { url: text; method: text; body: vec nat8; headers: vec record { text; text }; certificate_version: opt nat16 }) -> (record { body: vec nat8; headers: vec record { text; text }; upgrade: opt bool; streaming_strategy: opt variant { Callback: record { token: vec nat8; callback: func (vec nat8) -> (opt record { token: opt vec nat8; body: vec nat8 }) query } }; status_code: nat16 }) query;
    http_request_update: (record { url: text; method: text; body: vec nat8; headers: vec record { text; text } }) -> (record { body: vec nat8; headers: vec record { text; text }; upgrade: opt bool; streaming_strategy: opt variant { Callback: record { token: vec nat8; callback: func (vec nat8) -> (opt record { token: opt vec nat8; body: vec nat8 }) query } }; status_code: nat16 });
}